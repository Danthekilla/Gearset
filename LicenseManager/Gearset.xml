<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LicenseManager</name>
    </assembly>
    <members>
        <member name="T:Gearset.Component.Base32Url">
            <summary>
            Base32Url is a standard base 32 encoder/decoder except that padding turned
            off and it is not case sensitive (by default).
            
            If you turn padding and case sensitivity on it becomes a standard base32
            encoder/decoder giving you 8 character chunks right padded with equals symbols.
            
            If you leave padding off and use Base32Url.ZBase32Alphabet you
            get a z-base-32 compatible encoder/decoder.
            
            See http://tools.ietf.org/html/rfc4648
            For more information see http://en.wikipedia.org/wiki/Base32
            </summary>
        </member>
        <member name="M:Gearset.Component.Base32Url.#ctor">
            <summary>
            Create case insensitive encoder/decoder using the standard base32 alphabet without padding.
            White space is not permitted when decoding (not ignored).
            </summary>
        </member>
        <member name="M:Gearset.Component.Base32Url.#ctor(System.Boolean)">
            <summary>
            Create case insensitive encoder/decoder using the standard base32 alphabet.
            White space is not permitted when decoding (not ignored).
            </summary>
            <param name="padding">Require/use padding characters?</param>
        </member>
        <member name="M:Gearset.Component.Base32Url.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Create encoder/decoder using the standard base32 alphabet.
            White space is not permitted when decoding (not ignored).
            </summary>
            <param name="padding">Require/use padding characters?</param>
            <param name="caseSensitive">Be case sensitive when decoding?</param>
        </member>
        <member name="M:Gearset.Component.Base32Url.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create encoder/decoder using the standard base32 alphabet.
            </summary>
            <param name="padding">Require/use padding characters?</param>
            <param name="caseSensitive">Be case sensitive when decoding?</param>
            <param name="ignoreWhiteSpaceWhenDecoding">Ignore / allow white space when decoding?</param>
        </member>
        <member name="M:Gearset.Component.Base32Url.#ctor(System.String)">
            <summary>
            Create case insensitive encoder/decoder with alternative alphabet and no padding.
            White space is not permitted when decoding (not ignored).
            </summary>
            <param name="alternateAlphabet">Alphabet to use (such as Base32Url.ZBase32Alphabet)</param>
        </member>
        <member name="M:Gearset.Component.Base32Url.#ctor(System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create the encoder/decoder specifying all options manually.
            </summary>
            <param name="padding">Require/use padding characters?</param>
            <param name="caseSensitive">Be case sensitive when decoding?</param>
            <param name="ignoreWhiteSpaceWhenDecoding">Ignore / allow white space when decoding?</param>
            <param name="alternateAlphabet">Alphabet to use (such as Base32Url.ZBase32Alphabet, Base32Url.Base32StandardAlphabet or your own custom 32 character alphabet string)</param>
        </member>
        <member name="M:Gearset.Component.Base32Url.FromBase32String(System.String)">
            <summary>
            Decode a base32 string to a byte[] using the default options
            (case insensitive without padding using the standard base32 alphabet from rfc4648).
            White space is not permitted (not ignored).
            Use alternative constructors for more options.
            </summary>
        </member>
        <member name="M:Gearset.Component.Base32Url.ToBase32String(System.Byte[])">
            <summary>
            Encode a base32 string from a byte[] using the default options
            (case insensitive without padding using the standard base32 alphabet from rfc4648).
            Use alternative constructors for more options.
            </summary>
        </member>
        <member name="M:Gearset.Component.IValueStore.TryReadValue(System.Int64@)">
            <summary>
            Returns true if the value was successfully read.
            </summary>
        </member>
        <member name="M:Gearset.Component.IValueStore.HasBeenWrittenBefore">
            <summary>
            Returns true if it looks that a value has been written before
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gearset.Component.GraphicsDevice.TimeEnabled">
            <summary>
            Determines whether the current program requires time-bombed license
            manager.
            </summary>
        </member>
        <member name="E:Gearset.Component.GraphicsDevice.LicenseChanged">
            <summary>
            Raised when the license string changes.
            </summary>
        </member>
        <member name="E:Gearset.Component.GraphicsDevice.LicenseStatusChanged">
            <summary>
            Raised when the license status (valid or invalid changes). Only raised
            when an actual change is made (i.e. not everytime the property is set).
            </summary>
        </member>
        <member name="M:Gearset.Component.GraphicsDeviceManager.CheckFirstRun">
            <summary>
            Returns true if this is the first run.
            </summary>
        </member>
        <member name="M:Gearset.Component.GraphicsDeviceManager.CheckClockHack">
            <summary>
            Returns true if this is the first run.
            </summary>
        </member>
        <member name="M:Gearset.Component.GraphicsDeviceManager.CheckLicense">
            <summary>
            Returns true if the current license permits use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gearset.Component.GraphicsDeviceManager.FindHardwareId">
            <summary>
            Generates the Hardware ID for this machine.
            </summary>
        </member>
        <member name="E:Gearset.Component.GraphicsDeviceManager.Reset">
            <summary>
            Raised when the license status changes.
            </summary>
        </member>
        <member name="M:Gearset.Component.NativeMethods.CreateFileW(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
             Return Type: HANDLE->void*
            lpFileName: LPCWSTR->WCHAR*
            dwDesiredAccess: DWORD->unsigned int
            dwShareMode: DWORD->unsigned int
            lpSecurityAttributes: LPSECURITY_ATTRIBUTES->_SECURITY_ATTRIBUTES*
            dwCreationDisposition: DWORD->unsigned int
            dwFlagsAndAttributes: DWORD->unsigned int
            hTemplateFile: HANDLE->void*
        </member>
        <member name="F:Gearset.Component.NativeConstants.GENERIC_WRITE">
            GENERIC_WRITE -> (0x40000000L)
        </member>
        <member name="F:Gearset.Component.NativeConstants.FILE_SHARE_DELETE">
            FILE_SHARE_DELETE -> 0x00000004
        </member>
        <member name="F:Gearset.Component.NativeConstants.FILE_SHARE_WRITE">
            FILE_SHARE_WRITE -> 0x00000002
        </member>
        <member name="F:Gearset.Component.NativeConstants.FILE_SHARE_READ">
            FILE_SHARE_READ -> 0x00000001
        </member>
        <member name="F:Gearset.Component.NativeConstants.OPEN_ALWAYS">
            OPEN_ALWAYS -> 4
        </member>
        <member name="T:Gearset.Component.LicenseWindow">
            <summary>
            Interaction logic for LicenseWindow.xaml
            </summary>
            <summary>
            LicenseWindow
            </summary>
        </member>
        <member name="M:Gearset.Component.LicenseWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Gearset.Component.RegistryEditor">
            <summary>
            Used to read/write data to the Windows registry.
            </summary>
        </member>
        <member name="M:Gearset.Component.RegistryEditor.#ctor(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Creates a new RegistryEditor, baseKey is usually HKLM, HKCU, etc.
            subkey is where you want to store your data, list of '/' separated keys.
            </summary>
        </member>
        <member name="M:Gearset.Component.RegistryEditor.Read(System.String)">
            <summary>
            Returns the BaseKey/SubKey/keyName value or null if the key or path does not exists.
            </summary>
        </member>
        <member name="M:Gearset.Component.RegistryEditor.Write(System.String,System.Object)">
            <summary>
            Writes to BaseKey/SubKey/keyName the given value value. Returns true on success.
            </summary>
        </member>
        <member name="P:Gearset.Component.RegistryEditor.BaseKey">
            <summary>
            BaseKey is usually HKLM, HKCU, etc
            </summary>
        </member>
        <member name="P:Gearset.Component.RegistryEditor.KeyPath">
            <summary>
            Subkey is where you want to store your data
            </summary>
        </member>
        <member name="T:Gearset.Component.Resource1">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Gearset.Component.Resource1.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Gearset.Component.Resource1.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Gearset.Component.Resource1.String1">
             <summary>
               Looks up a localized string similar to &lt;RSAKeyValue&gt;
              &lt;Modulus&gt;nM2mAXPOwk4XhmjdBmr48s0fxAVceF+lv6sFuArUvSkVuNV9chs0ZfVlQ4WO6anvwV1GGk3xZGuNTg/DzNja7tYFAhOxRRBaub/DQUO617x5IbKTpI1x7xtQWoqxtpKypUod7tQxIQ3S0dwRISHan6JFgzcl48nEA4LUQDmQVQ0=&lt;/Modulus&gt;
              &lt;Exponent&gt;JQ==&lt;/Exponent&gt;
            &lt;/RSAKeyValue&gt;.
             </summary>
        </member>
    </members>
</doc>
